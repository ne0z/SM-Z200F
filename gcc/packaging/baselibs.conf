arch i586 targets armv7l:armv7l aarch64:aarch64 
arch x86_64 targets armv7l:armv7l aarch64:aarch64 


cross-armv7l-gcc-accel-@X86@
  targettype x86 block!
  targettype 32bit block!
  targettype aarch64 block!

  targettype armv7l autoreqprov off
  targettype armv7l provides "cross-arm-gcc-accel"
  targettype armv7l provides "cross-arm-gcc49-accel"
  targettype armv7l provides "cross-armv7l-gcc-accel-armv7l"
  targettype armv7l requires "glibc-@X86@-arm"
  targettype armv7l requires "libgcc-@X86@-arm"
  targettype armv7l requires "gcc"
  targettype armv7l requires "gcc-c++"

  targettype armv7l prefix /emul/ia32-linux
  targettype armv7l extension -arm
  targettype armv7l +/
  targettype armv7l -/usr/lib/debug
  targettype armv7l -/usr/lib64/debug
  targettype armv7l -/usr/src/debug
  targettype armv7l -/usr/share/man
  targettype armv7l -/usr/share/doc
  targettype armv7l -/usr/share/locale
  targettype armv7l requires "tizen-accelerator"
  targettype armv7l post "#set -x"
  targettype armv7l post " export GCCVER=$(LANG=C gcc -dumpversion) "
  targettype armv7l post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc -dumpversion) "
  targettype armv7l post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7l post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7l post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7l post "  for bin in c++ cpp g++ gcc gcov gcc-ar gcc-nm gcc-ranlib; do "
  targettype armv7l post "   binary="/usr/bin/${bin}" "
  targettype armv7l post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7l post "   else "
  targettype armv7l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7l post "   fi "
  targettype armv7l post "  done "

  targettype armv7l post "  for bin in cc1 cc1plus collect2 lto-wrapper ; do "
  targettype armv7l post "   binary="/usr/lib/gcc/armv7l-tizen-linux-gnueabi/$GCCVER/${bin}" "
  targettype armv7l post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7l post "   else "
  targettype armv7l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary} "
  targettype armv7l post "   fi "
  targettype armv7l post "  done "

  targettype armv7l post "  for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7l post "    ln -sf /usr/bin/${bin} /usr/lib/gcc/armv7l-tizen-linux-gnueabi/${GCCVER}/${bin}"
  targettype armv7l post "  done "
  targettype armv7l post " fi "

  targettype armv7l preun " export GCCVER=$(LANG=C gcc -dumpversion) "
  targettype armv7l preun " for bin in c++ cpp g++ gcc gcov gcc-ar gcc-nm gcc-ranlib ; do "
  targettype armv7l preun "  binary="/usr/bin/${bin}" "
  targettype armv7l preun "  if test -e ${binary}.orig-arm ; then "
  targettype armv7l preun "   rm ${binary} && mv ${binary}.orig-arm ${binary} "
  targettype armv7l preun "  else "  
  targettype armv7l preun "   echo "${binary}.orig-arm not present !" "
  targettype armv7l preun "  fi "
  targettype armv7l preun " done "
  targettype armv7l preun " for bin in cc1 cc1plus collect2 lto-wrapper ; do "
  targettype armv7l preun "  binary=/usr/lib/gcc/armv7l-tizen-linux-gnueabi/$GCCVER/${bin} "
  targettype armv7l preun "  if test -e ${binary}.orig-arm ; then "
  targettype armv7l preun "   rm ${binary} && mv ${binary}.orig-arm ${binary} "
  targettype armv7l preun "  else "  
  targettype armv7l preun "   echo "${binary}.orig-arm not present !" "
  targettype armv7l preun "  fi "
  targettype armv7l preun " done "
  targettype armv7l preun " for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7l preun "   rm /usr/lib/gcc/armv7l-tizen-linux-gnueabi/${GCCVER}/${bin}"
  targettype armv7l preun " done "


cross-aarch64-gcc-accel-@X86@
  targettype x86 block!
  targettype 32bit block!
  targettype armv7l block!

  targettype aarch64 autoreqprov off
  targettype aarch64 provides "cross-arm-gcc-accel"
  targettype aarch64 provides "cross-arm-gcc49-accel"
  targettype aarch64 provides "cross-aarch64-gcc-accel-aarch64"
  targettype aarch64 requires "glibc-@X86@-arm"
  targettype aarch64 requires "libgcc-@X86@-arm"
  targettype aarch64 requires "gcc"
  targettype aarch64 requires "gcc-c++"

  targettype aarch64 prefix /emul/ia32-linux
  targettype aarch64 extension -arm
  targettype aarch64 +/
  targettype aarch64 -/usr/lib/debug
  targettype aarch64 -/usr/lib64/debug
  targettype aarch64 -/usr/src/debug
  targettype aarch64 -/usr/share/man
  targettype aarch64 -/usr/share/doc
  targettype aarch64 -/usr/share/locale
  targettype aarch64 requires "tizen-accelerator"
  targettype aarch64 post "#set -x"
  targettype aarch64 post " export GCCVER=$(LANG=C gcc -dumpversion) "
  targettype aarch64 post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc -dumpversion) "
  targettype aarch64 post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype aarch64 post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype aarch64 post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype aarch64 post "  for bin in c++ cpp g++ gcc gcov gcc-ar gcc-nm gcc-ranlib; do "
  targettype aarch64 post "   binary="/usr/bin/${bin}" "
  targettype aarch64 post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype aarch64 post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype aarch64 post "   else "
  targettype aarch64 post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype aarch64 post "   fi "
  targettype aarch64 post "  done "

  targettype aarch64 post "  for bin in cc1 cc1plus collect2 lto-wrapper ; do "
  targettype aarch64 post "   binary="/usr/lib/gcc/aarch64-tizen-linux-gnu/$GCCVER/${bin}" "
  targettype aarch64 post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype aarch64 post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype aarch64 post "   else "
  targettype aarch64 post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary} "
  targettype aarch64 post "   fi "
  targettype aarch64 post "  done "

  targettype aarch64 post "  for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype aarch64 post "    ln -sf /usr/bin/${bin} /usr/lib/gcc/aarch64-tizen-linux-gnu/${GCCVER}/${bin}"
  targettype aarch64 post "  done "
  targettype aarch64 post " fi "

  targettype aarch64 preun " export GCCVER=$(LANG=C gcc -dumpversion) "
  targettype aarch64 preun " for bin in c++ cpp g++ gcc gcov gcc-ar gcc-nm gcc-ranlib ; do "
  targettype aarch64 preun "  binary="/usr/bin/${bin}" "
  targettype aarch64 preun "  if test -e ${binary}.orig-arm ; then "
  targettype aarch64 preun "   rm ${binary} && mv ${binary}.orig-arm ${binary} "
  targettype aarch64 preun "  else "  
  targettype aarch64 preun "   echo "${binary}.orig-arm not present !" "
  targettype aarch64 preun "  fi "
  targettype aarch64 preun " done "
  targettype aarch64 preun " for bin in cc1 cc1plus collect2 lto-wrapper ; do "
  targettype aarch64 preun "  binary=/usr/lib/gcc/aarch64-tizen-linux-gnu/$GCCVER/${bin} "
  targettype aarch64 preun "  if test -e ${binary}.orig-arm ; then "
  targettype aarch64 preun "   rm ${binary} && mv ${binary}.orig-arm ${binary} "
  targettype aarch64 preun "  else "  
  targettype aarch64 preun "   echo "${binary}.orig-arm not present !" "
  targettype aarch64 preun "  fi "
  targettype aarch64 preun " done "
  targettype aarch64 preun " for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype aarch64 preun "   rm /usr/lib/gcc/aarch64-tizen-linux-gnu/${GCCVER}/${bin}"
  targettype aarch64 preun " done "

